
<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">

      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>

      <a class="navbar-brand" href="/profile">Memorybucket</a>
    </div>

    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">

        <li class="dropdown">

          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false"><span class="glyphicon glyphicon-picture"></span> Photos <span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><a href="/general">General</a></li>
            <li><a href="/places">Places</a></li>
            <li><a href="/food">Food</a></li>
            <li><a href="/people">People</a></li>
            <li><a href="/events">Events</a></li>
            <li><a href="/random">Random</a></li>
          </ul>
        </li>
      </ul>

      <ul class="nav navbar-nav navbar-right">
        <li><a href="/profile"><span class="glyphicon glyphicon-user"></span> My Bucket </a></li>
        <li><a href="/logout"><span class="glyphicon glyphicon-log-out"></span> Logout </a></li>

      </ul>
    </div>
  </div>
</nav>


<h2>Add new photo</h2>

<div style="background:transparent !important" class="jumbotron container-fluid">


  <label for="photo_url">Photo upload</label>
  <input type="file" id="file-input">
  <p id="status">Please select a file</p>
  <img style="border:1px solid gray;width:300px;"  id="preview" src="/images/default.png">



  <form method="POST" action="/newphoto">
      <input type="hidden" id="photo_url" name="photo_url" value="/images/default.png">


  <div class="form-group">
    <label for="caption">Caption</label>
    <input class="form-control" type="text" name="caption" id="caption">
  </div>


  <div class="form-group">
    <label for="category">Category</label><br>
    <select name="category_type" id="category">
    <option value="Random">Random</option>
    <option value="Places">Places</option>
    <option value="Food">Food</option>
    <option value="People">People</option>
    <option value="Events">Event</option>
  </select>
  </div>

  <div class="form-group">
    <label for="view_option">View</label><br>
    <select name="View" id="view">
    <option value="Yes">Public</option>
    <option value="No">Private</option>
  </select>
</div><br>

  <input class="btn btn-default" type="submit" value="Post photo">
</form>


<script>

    /*
      Function to carry out the actual PUT request to S3 using the signed request from the app.
    */
    function uploadFile(file, signedRequest, url){
      const xhr = new XMLHttpRequest();
      xhr.open('PUT', signedRequest);
      xhr.onreadystatechange = () => {
        if(xhr.readyState === 4){
          if(xhr.status === 200){
            document.getElementById('preview').src = url;
            document.getElementById('photo_url').value = url;
          }
          else{
            alert('Could not upload file.');
          }
        }
      };
      xhr.send(file);
    }

    /*
      Function to get the temporary signed request from the app.
      If request successful, continue to upload the file using this signed
      request.
    */
    function getSignedRequest(file){
      const xhr = new XMLHttpRequest();
      xhr.open('GET', `/sign-s3?file-name=${file.name}&file-type=${file.type}`);
      xhr.onreadystatechange = () => {
        if(xhr.readyState === 4){
          if(xhr.status === 200){
            const response = JSON.parse(xhr.responseText);
            uploadFile(file, response.signedRequest, response.url);
          }
          else{
            alert('Could not get signed URL.');
          }
        }
      };
      xhr.send();
    }

    /*
     Function called when file input updated. If there is a file selected, then
     start upload procedure by asking for a signed request from the app.
    */
    function initUpload(){
      const files = document.getElementById('file-input').files;
      const file = files[0];

      if(file == null){
        return alert('No file selected.');
      }
      getSignedRequest(file);
    }

    /*
     Bind listeners when the page loads.
    */
    (() => {
        document.getElementById('file-input').onchange = initUpload;
    })();

    </script>
